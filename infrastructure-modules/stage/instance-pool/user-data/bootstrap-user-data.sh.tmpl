#!/bin/bash -e

# This is a coreos-cluster-cloudinit bootstrap script template. It is rendered by terraform template resource and then
# passed in as 'user-data' file during the machine build.
# Then the script is executed to download the CoreOs "cloud-config.yaml" file  and "initial-cluster" files.
# These files  will configure the system to join the CoreOS cluster. The second stage cloud-config.yaml can
# be changed to allow system configuration changes without having to rebuild the system. All it takes is a reboot.
# If this script changes, the machine will need to be rebuild (user-data change)

# Convention:
# 1. The variables need to be replaced by terraform template should be defined with a single dollar sign
#    To escape terraform replacement, or to keep variables as variables in the rendered script, skip the replacement by adding double dollar sign
# 2. The bucket name passed as `config_bucket` should should exist and contain cloud-config.yaml
#  e.g. <config_bucket>/<module>/cloud-config.yaml
# 3. All machines should have instance role profile, with a policy that allows access to this bucket.

# Get instance auth token from meta-data
aws_region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}');

get_value() {
  echo -n $(curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/$roleProfile | jq -r ".$1")
}

# Headers for curl
create_string_to_sign() {
  contentType="application/x-compressed-tar"
  contentType=""
  dateValue="`date +'%a, %d %b %Y %H:%M:%S %z'`"

  # stringToSign
  stringToSign="GET

$${contentType}
$${dateValue}
x-amz-security-token:$${s3Token}
$${resource}"
}

# Log curl call
debug_log () {
    echo ""  >> /tmp/s3-bootstrap.log
    echo "curl -s -O -H \"Host: $${configBucket}.s3-$${aws_region}.amazonaws.com\"
  -H \"Content-Type: $${contentType}\"
  -H \"Authorization: AWS $${s3Key}:$${signature}\"
  -H \"x-amz-security-token:$${s3Token}\"
  -H \"Date: $${dateValue}\"
	https://$${configBucket}.s3-$${aws_region}.amazonaws.com/$${filePath} " >> /tmp/s3-bootstrap.log
}

# Instance profile
instanceProfile=$(curl -s http://169.254.169.254/latest/meta-data/iam/info \
        | jq -r '.InstanceProfileArn' \
	| sed  's#.*instance-profile/##')

############################
## External Input Variables
## From terraform template
############################
stackName=${stack_name}
configBucket=${config_bucket_name}
cloudInitBucket=${cloudinit_bucket_name}
module=${module_name}

# Path to cloud-config.yaml
roleProfile=$${instanceProfile}
cloudConfigYaml="$${module}/cloud-config.yaml"

# path to initial-cluster urls file
initialCluster="etcd/initial-cluster"

# Find token, AccessKeyId,  line, remove leading space, quote, commas
s3Token=$(get_value "Token")
s3Key=$(get_value "AccessKeyId")
s3Secret=$(get_value "SecretAccessKey")

workDir="/root/cloudinit"
mkdir -m 700 -p $${workDir}
cd $${workDir}

# Download <bucket_name>/<module>/clould-config.yaml
#
# And replace ipv4 vars in clould-config.yaml
# because oem-cloudinit.service does it only on native "user-data", i.e. this script.
resource="/$${cloudInitBucket}/$${cloudConfigYaml}"
create_string_to_sign
signature=$(/bin/echo -n "$stringToSign" | openssl sha1 -hmac $${s3Secret} -binary | base64)
filePath=$${cloudConfigYaml}
debug_log
curl -L -s -H "Host: $${cloudInitBucket}.s3-$${aws_region}.amazonaws.com" \
  -H "Content-Type: $${contentType}" \
  -H "Authorization: AWS $${s3Key}:$${signature}" \
  -H "x-amz-security-token:$${s3Token}" \
  -H "Date: $${dateValue}" \
  https://$${cloudInitBucket}.s3-$${aws_region}.amazonaws.com/$${filePath} \
  | sed "s#\\$private_ipv4#$private_ipv4#g; s#\\$public_ipv4#$public_ipv4#g" \
  > $${workDir}/cloud-config.yaml

# Download initial-cluster
resource="/$${configBucket}/$${initialCluster}"
create_string_to_sign
signature=$(/bin/echo -n "$stringToSign" | openssl sha1 -hmac $${s3Secret} -binary | base64)
filePath=$${initialCluster}
debug_log
retry=5
ready=0
until [[ $retry -eq 0 ]]  || [[ $ready -eq 1  ]]
do
  curl -s -L -O -H "Host: $${configBucket}.s3-$${aws_region}.amazonaws.com" \
    -H "Content-Type: $${contentType}" \
    -H "Authorization: AWS $${s3Key}:$${signature}" \
    -H "x-amz-security-token:$${s3Token}" \
    -H "Date: $${dateValue}" https://$${configBucket}.s3-$${aws_region}.amazonaws.com/$${filePath}
  if [ -f $${workDir}/initial-cluster ] && grep -q ETCD_INITIAL_CLUSTER $${workDir}/initial-cluster ;
  then
    ready=1
  else
    let "retry--"
  fi
done

# Copy initial-cluster to the volume that will be picked up by etcd boostraping
if [ $ready -eq 1 ];
then
  mkdir -p /etc/sysconfig
  cp $${workDir}/initial-cluster /etc/sysconfig/initial-cluster
fi

# Create /etc/environment file so the cloud-init can get IP addresses
coreos_env='/etc/environment'
if [ ! -f $coreos_env ];
then
    echo "COREOS_PRIVATE_IPV4=$private_ipv4" > /etc/environment
    echo "COREOS_PUBLIC_IPV4=$public_ipv4" >> /etc/environment
    echo "INSTANCE_PROFILE=$instanceProfile" >> /etc/environment
fi

################################################################
# Additional user-data script will be inserted here (if any)
################################################################
${additional_user_data_scripts}
################################################################
################################################################

# Copy the cloud-config file and replace it with the default cloud-config of coreos
# so that our cloud-config becomes the defualt cloud-config for the coreos machine
# Required when creating AMI so that all instances created from that AMI also have
# this cloud config as their default on startup
cp $${workDir}/cloud-config.yaml /usr/share/oem/cloud-config.yml

# Run cloud-init
coreos-cloudinit --from-file=$${workDir}/cloud-config.yaml