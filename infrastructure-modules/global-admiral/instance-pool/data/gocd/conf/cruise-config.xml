<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="81">
  <server artifactsdir="artifacts" agentAutoRegisterKey="123456789ytrewq" commandRepositoryLocation="default" serverId="e89d0b81-9c38-4e25-a946-ac1dc6944233">
    <security>
      <passwordFile path="/passwd" />
    </security>
  </server>
  <pipelines group="APP-Dev">
    <pipeline name="app-build-dev" template="stakater_build">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="ENVIRONMENT">dev</param>
        <param name="APP_DOCKER_IMAGE">registry.stakater-reference.local:80/app_dev</param>
      </params>
      <materials>
        <git url="" branch="develop" />
      </materials>
    </pipeline>
    <pipeline name="app-deploy-dev" template="stakater_deploy_cluster">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="CLUSTER_ENV">dev</param>
        <param name="APP_DOCKER_IMAGE">registry.stakater-reference.local:80/app_dev</param>
        <param name="APP_DOCKER_OPTS">-p 8080:8080</param>
        <param name="EXTRA_UNIT_OPTS"/>
      </params>
      <materials>
        <pipeline pipelineName="app-build-dev" stageName="Build" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="APP-Test">
    <pipeline name="app-build-qa" template="stakater_build">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="ENVIRONMENT">test</param>
        <param name="APP_DOCKER_IMAGE">registry.stakater-reference.local:80/app_qa</param>
      </params>
      <materials>
        <git url="" branch="master" />
      </materials>
    </pipeline>
    <pipeline name="app-deploy-qa" template="stakater_deploy_cluster">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="CLUSTER_ENV">qa</param>
        <param name="APP_DOCKER_IMAGE">registry.stakater-reference.local:80/app_qa</param>
        <param name="APP_DOCKER_OPTS">-p 8080:8080</param>
        <param name="EXTRA_UNIT_OPTS"/>
      </params>
      <materials>
        <pipeline pipelineName="app-build-qa" stageName="Build" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="APP-Production">
    <pipeline name="app-build-prod" template="stakater_build">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="ENVIRONMENT">test</param>
        <param name="APP_DOCKER_IMAGE">registry.stakater-reference.local:80/app_prod</param>
      </params>
      <materials>
        <git url="" branch="master" />
      </materials>
    </pipeline>
    <pipeline name="app-create-ami-prod" template="stakater_build_ami">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="ENVIRONMENT">prod</param>
        <param name="APP_DOCKER_IMAGE">registry.stakater-reference.local:80/app_prod</param>
        <param name="APP_DOCKER_OPTS">-p 8080:8080</param>
        <param name="PROD_CLOUDINIT_S3_FULL_PATH" />
        <param name="DATA_EBS_DEVICE_NAME">/dev/sdf</param>
        <param name="DATA_EBS_VOL_SIZE">50</param>
        <param name="LOGS_EBS_DEVICE_NAME">/dev/sdg</param>
        <param name="LOGS_EBS_VOL_SIZE">20</param>
      </params>
      <materials>
        <pipeline pipelineName="app-build-prod" stageName="Build" />
      </materials>
    </pipeline>
    <pipeline name="app-delete-ami-prod" template="stakater_delete_ami">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="ENVIRONMENT">prod</param>
      </params>
      <materials>
        <pipeline pipelineName="app-create-ami-prod" stageName="Build-AMI" />
      </materials>
    </pipeline>
    <pipeline name="app-deploy-prod" template="stakater_launch_ami">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="ENVIRONMENT">prod</param>
        <param name="APP_DOCKER_IMAGE">registry.stakater-reference.local:80/app_prod</param>
        <param name="SSL_CERTIFICATE_ARN"/>
        <param name="IS_ELB_INTERNAL">false</param>
        <param name="INSTANCE_TYPE">t2.micro</param>
        <param name="ENV_TF_STATE_KEY"/>
      </params>
      <materials>
        <pipeline pipelineName="app-delete-ami-prod" stageName="Delete-AMI" />
      </materials>
    </pipeline>
    <pipeline name="app-switch-group" template="stakater_switch_deployment_group">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="ENVIRONMENT">prod</param>
      </params>
      <materials>
        <pipeline pipelineName="app-deploy-prod" stageName="Launch-AMI" />
      </materials>
    </pipeline>
    <pipeline name="app-rollback-deployment" template="stakater_rollback_deployment">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">app</param>
        <param name="ENVIRONMENT">prod</param>
      </params>
      <materials>
        <pipeline pipelineName="app-deploy-prod" stageName="Launch-AMI" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Admiral">
    <pipeline name="deploy-to-admiral-dev" template="stakater_deploy_admiral">
      <params>
        <param name="SOURCE_DIR" />
        <param name="APP_NAME">logstash</param>
        <param name="CLUSTER_ENV">dev</param>
      </params>
      <materials>
        <git url="https://github.com/stakater/infrastructure-app-units" shallowClone="true" autoUpdate="false" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Manage_Dev_Servers">
    <pipeline name="Stop-Dev" template="stop_infra">
      <params>
        <param name="SOURCE_DIR" />
        <param name="ENVIRONMENT">dev</param>
      </params>
      <materials>
        <git url="https://github.com/stakater/dummy-repo.git" shallowClone="true" autoUpdate="false" />
      </materials>
    </pipeline>
    <pipeline name="Start-Dev" template="start_infra">
      <params>
        <param name="SOURCE_DIR" />
        <param name="ENVIRONMENT">dev</param>
      </params>
      <materials>
        <git url="https://github.com/stakater/dummy-repo.git" shallowClone="true" autoUpdate="false" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Destroy_BG_Groups">
      <pipeline name="Destroy-App-Prod" template="destroy-BG">
          <params>
              <param name="SOURCE_DIR" />
              <param name="APP_NAME">app</param>
              <param name="ENVIRONMENT">prod</param>
          </params>
          <materials>
              <git url="https://github.com/stakater/dummy-repo.git" shallowClone="true" autoUpdate="false" />
          </materials>
      </pipeline>
  </pipelines>
  <templates>
    <pipeline name="stakater_build">
      <stage name="Build">
        <jobs>
          <job name="Build">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/compile-code.sh #{APP_NAME} #{ENVIRONMENT}</arg>
                <runif status="any" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/test-code.sh #{APP_NAME} #{ENVIRONMENT}</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/build-docker-image.sh #{APP_NAME} #{ENVIRONMENT} ${GO_PIPELINE_COUNTER}.${GO_STAGE_COUNTER} #{APP_DOCKER_IMAGE}</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/clean-up.sh</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="stakater_deploy_cluster">
      <stage name="Deploy-to-Cluster" fetchMaterials="false">
        <jobs>
          <job name="Run">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/deploy-to-cluster.sh #{APP_NAME} #{CLUSTER_ENV} #{APP_DOCKER_IMAGE} "#{APP_DOCKER_OPTS}" "#{EXTRA_UNIT_OPTS}"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="stakater_deploy_admiral">
      <stage name="Deploy-to-Admiral">
        <approval type="manual" />
        <jobs>
          <job name="Run">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/deploy-to-admiral.sh -a "#{APP_NAME}" -e "#{CLUSTER_ENV}"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="stakater_build_ami">
      <stage name="Build-AMI" fetchMaterials="false">
        <jobs>
          <job name="Build-AMI">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/build-ami.sh -a #{APP_NAME} -r #{ENVIRONMENT} -b ${GO_PIPELINE_COUNTER}.${GO_STAGE_COUNTER} -u $(uuid -v4) -d #{APP_DOCKER_IMAGE} -o "#{APP_DOCKER_OPTS}" -c "#{CLOUDINIT_S3_FULL_PATH}" -e "#{DATA_EBS_DEVICE_NAME}" -z "#{DATA_EBS_VOL_SIZE}" -l "#{LOGS_EBS_DEVICE_NAME}" -x "#{LOGS_EBS_VOL_SIZE}"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="stakater_delete_ami">
      <stage name="Delete-AMI" fetchMaterials="false">
        <jobs>
          <job name="Delete-AMI">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/delete-ami.sh -a #{APP_NAME} -e #{ENVIRONMENT}</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="stakater_launch_ami">
      <stage name="Launch-AMI" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="Launch-AMI">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>AWS_REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}');
                  /gocd-data/scripts/deploy-to-prod.sh -r $AWS_REGION -e #{ENVIRONMENT} -f #{ENV_TF_STATE_KEY} -k #{ENVIRONMENT}/#{APP_NAME}/terraform.tfstate -a #{APP_NAME} -s "#{SSL_CERTIFICATE_ARN}" -i "#{INSTANCE_TYPE}"  -t "#{IS_ELB_INTERNAL}"</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="stakater_switch_deployment_group">
      <stage name="BG-Deployment-Switch-Group" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="BG-Deployment-Switch-Group">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>AWS_REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}');
                  /gocd-data/scripts/switch-deployment-group.sh #{APP_NAME} #{ENVIRONMENT} $AWS_REGION #{ENVIRONMENT}/#{APP_NAME}/terraform.tfstate</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="stakater_rollback_deployment">
      <stage name="BG-Rollback-Deployment" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="BG-Rollback-Deployment">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>AWS_REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document|grep region|awk -F\" '{print $4}');
                  /gocd-data/scripts/rollback-deployment.sh #{APP_NAME} #{ENVIRONMENT} $AWS_REGION #{ENVIRONMENT}/#{APP_NAME}/terraform.tfstate</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="stop_infra">
      <stage name="Stop-Infra" fetchMaterials="false">
        <approval type="manual" />
        <jobs>
          <job name="Stop-Infra">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/stop-infra.sh #{ENVIRONMENT}</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="start_infra">
      <stage name="Start-Infra" fetchMaterials="false">
        <jobs>
          <job name="Start-Infra">
            <tasks>
              <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                <arg>-c</arg>
                <arg>/gocd-data/scripts/start-infra.sh #{ENVIRONMENT}</arg>
                <runif status="any" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="destroy-BG">
        <stage name="Destroy" fetchMaterials="false">
            <approval type="manual" />
            <jobs>
                <job name="Run">
                    <tasks>
                        <exec command="/bin/bash" workingdir="#{SOURCE_DIR}">
                            <arg>-c</arg>
                            <arg>sudo /gocd-data/scripts/destroy-BG-group.sh -a #{APP_NAME} -e #{ENVIRONMENT}</arg>
                            <runif status="passed" />
                        </exec>
                    </tasks>
                </job>
            </jobs>
        </stage>
    </pipeline>
  </templates>
  <environments>
    <environment name="Build">
      <agents>
        <physical uuid="3bc29fff-e81d-42de-9d00-a83d3f26e537" />
        <physical uuid="e4c8fe98-5e1b-4094-a28c-70b3a6aefdd4" />
      </agents>
      <pipelines>
        <pipeline name="app-build-prod" />
        <pipeline name="app-build-dev" />
        <pipeline name="app-build-qa" />
      </pipelines>
    </environment>
    <environment name="Build-AMI">
      <agents>
      </agents>
      <pipelines>
        <pipeline name="app-create-ami-prod" />
      </pipelines>
    </environment>
    <environment name="Deploy-to-Production">
      <agents>
      </agents>
      <pipelines>
        <pipeline name="app-deploy-prod" />
        <pipeline name="app-switch-group" />
        <pipeline name="app-rollback-deployment" />
      </pipelines>
    </environment>
    <environment name="Deploy-to-Cluster">
      <agents>
      </agents>
      <pipelines>
        <pipeline name="deploy-to-admiral-dev" />
        <pipeline name="app-deploy-dev" />
        <pipeline name="app-deploy-qa" />
      </pipelines>
    </environment>
    <environment name="Management">
      <agents>
      </agents>
      <pipelines>
        <pipeline name="Start-Dev" />
        <pipeline name="Stop-Dev" />
        <pipeline name="Destroy-App-Prod" />
        <pipeline name="app-delete-ami-prod" />
      </pipelines>
    </environment>
  </environments>
  <agents>
</agents>
</cruise>