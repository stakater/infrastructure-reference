#cloud-config

coreos:
  etcd2:
    proxy: on
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
  fleet:
    public-ip: $private_ipv4
    metadata: "env=${stack_name},platform=ec2,provider=aws,role=docker_registry"
    etcd_key_prefix: "/stakater/docker-registry/"
  update:
    reboot-strategy: off
  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 60-initial-cluster.conf
          content: |
            [Service]
            EnvironmentFile=/etc/sysconfig/initial-cluster
    - name: fleet.service
      command: start
    - name: docker.service
      command: start
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
          [Unit]
          Description=Docker Socket for the API

          [Socket]
          ListenStream=2375
          Service=docker.service
          BindIPv6Only=both

          [Install]
          WantedBy=sockets.target
    - name: format-opt-data.service
      command: start
      content: |
        [Unit]
        Description=Formats opt data drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=opt-data"
        Environment="DEV=/dev/xvdh"
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then  wipefs -a -f $DEV && mkfs.ext4 -F -L $LABEL $DEV && echo wiped; fi"
    - name: opt-data.mount
      command: start
      content: |
        [Unit]
        Description=Mount data to /opt/data
        Requires=format-opt-data.service
        After=format-opt-data.service
        [Mount]
        What=/dev/xvdh
        Where=/opt/data
        Type=ext4
    - name: update-window.service
      command: start
      content: |
        [Unit]
        Description=Reboot if an update has been downloaded
        ConditionPathExists=/opt/bin/update-window.sh
        [Service]
        ExecStart=/opt/bin/update-window.sh
    - name: update-window.timer
      command: start
      content: |
        [Unit]
        Description=Reboot timer
        [Timer]
        OnCalendar=*-*-* 05,06:00/30:00
    - name: gen-certificate.service
      command: start
      content: |
        [Unit]
        Description= Service for generating certificates for docker registry
        Requires=docker.service
        After=docker.service
        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=300
        ExecStartPre=/usr/bin/docker pull paulczar/omgwtfssl
        ExecStartPre=-/usr/bin/docker rm -f %n
        ExecStartPre=-/bin/mkdir -p /opt/data/registry/data
        ExecStartPre=-/bin/mkdir -p /opt/data/registry/ssl
        ExecStartPre=-/bin/mkdir -p /opt/data/registry/config
        ExecStart=/usr/bin/docker run --rm --name %n \
                  -v /opt/data/registry/ssl:/certs \
                  -e CA_SUBJECT=registry.${stack_name}.local \
                  -e SSL_DNS=registry.${stack_name}.local \
                  -e SSL_EXPIRE=24820 \
                  -e CA_EXPIRE=24820 \
                  paulczar/omgwtfssl
        ExecStop=/usr/bin/sh -c "/etc/scripts/upload-registry-certs.sh /opt/data/registry/ssl registry-certificates"
        Restart=on-failure
        RestartSec=5s
    - name: registry.service
      command: start
      content: |
        [Unit]
        Description=Docker Image Registry
        Requires=docker.service
        After=docker.service
        After=gen-certificate.service
        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=300
        ExecStartPre=/usr/bin/docker pull registry:2
        ExecStartPre=-/usr/bin/docker rm -f %n
        ExecStart=/usr/bin/docker run  --rm --name %n -p 5000:5000 \
                  -v /opt/data/registry:/opt/registry \
                  -e REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/opt/registry/data \
                  -e REGISTRY_HTTP_TLS_KEY=/opt/registry/ssl/key.pem \
                  -e REGISTRY_HTTP_TLS_CERTIFICATE=/opt/registry/ssl/cert.pem \
                  -e REGISTRY_HTTP_TLS_CLIENTCAS_0=/opt/registry/ssl/ca.pem \
                  registry:2
        RestartSec=5
        Restart=always