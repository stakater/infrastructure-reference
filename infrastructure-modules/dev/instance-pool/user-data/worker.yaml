#cloud-config
coreos:
  etcd2:
    proxy: on
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
  fleet:
    public-ip: $private_ipv4
    metadata: "env=${stack_name},platform=ec2,provider=aws,role=worker"
    etcd_key_prefix: "/stakater/dev/worker"
  update:
    reboot-strategy: off
  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: 60-initial-cluster.conf
          content: |
            [Service]
            EnvironmentFile=/etc/sysconfig/initial-cluster
    - name: fleet.service
      command: start
    - name: update-initial-cluster.service
      command: start
      enable: true
      content: |
        [Unit]
        Description= Unit file to run update-initial-cluster script
        [Service]
        Type=oneshot
        TimeoutStartSec=0
        ExecStart=/usr/bin/sh -c "/opt/bin/update-initial-cluster.sh -b ${global_admiral_config_bucket}"
    - name: format-disk.service
      command: start
      content: |
        [Unit]
        Description=Formats the disk drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        Environment="LABEL=var-lib-docker"
        Environment="DEV=/dev/xvdf"
        # Make Dev letter is same as the ebs device mounted e.g. xvdf for sdf
        # Do not wipe the disk if it's already being used, so the docker images persistent cross reboot.
        ExecStart=-/bin/bash -c "if ! findfs LABEL=$LABEL > /tmp/label.$LABEL; then wipefs -a -f $DEV && mkfs.ext4 -T news -F -L $LABEL $DEV && echo wiped; fi"
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount disk to /var/lib/docker
        Requires=format-disk.service
        After=format-disk.service
        Before=docker.service
        [Mount]
        What=/dev/xvdf
        Where=/var/lib/docker
        Type=ext4
    - name: docker.service
      command: start
      drop-ins:
        - name: 60-docker-wait-for-var-lib.conf
          content: |
              [Unit]
              Requires=var-lib-docker.mount
              After=var-lib-docker.mount
              [Service]
              Restart=always
              RestartSec=5
    - name: data.mount
      content: |
        [Mount]
        What=EFS_DNS:/
        Where=/data
        Type=nfs
    - name: runcmd.service
      command: start
      content: |
        [Unit]
        Description=command
        [Service]
        RemainAfterExit=true
        Type=oneshot
        Environment="EFS_DNS=${efs_dns}"
        ExecStart=/bin/sh -c "AZ_ZONE=$(curl -s -L http://169.254.169.254/latest/meta-data/placement/availability-zone); \
                              sed -i \"s/EFS_DNS/$AZ_ZONE.$EFS_DNS/\" /etc/systemd/system/data.mount; \
                              systemctl daemon-reload; \
                              systemctl restart data.mount"
# 1- Append current availability-zone to EFS_DNS Substring
# 2- Replace EFS_DNS with the resulting value in systemd file
# 3- Restart the systemd unit
    - name: nginx.service
      command: start
      content: |
        [Unit]
        Description=Nginx Service
        Requires=docker.service
        After=docker.service
        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker rm %n
        ExecStart=/usr/bin/docker run --rm --name %n -p 80:80 -v /nginx/conf:/etc/nginx/conf.d/ nginx
        ExecStop=/usr/bin/docker stop %n
        [Install]
        WantedBy=multi-user.target

write_files:
  - path: /etc/conf.d/nfs
    permissions: '0644'
    content: |
      OPTS_RPC_MOUNTD=""
  - path: /nginx/conf/default.conf
    permissions: '0644'
    content: |
      server {
        listen 80;

        location /health_check {
              return 200;
        }
        location / {
          #x_forwarded_proto property set by ELB
          if ($http_x_forwarded_proto != 'https') {
           rewrite ^ https://$host$request_uri? permanent;
          }
        }
      }
  - path: /opt/bin/update-initial-cluster.sh
    permissions: 0700
    owner: root
    content: |
        #!/bin/bash
        # This script downloads the initial-cluster file from S3 buckets and updates etcd files

        BUCKET_NAME=""
        bOptionFlag=false;
        # Get options from the command line
        while getopts ":b:" OPTION
        do
            case $OPTION in
                b)
                  BUCKET_NAME=$OPTARG
                  bOptionFlag=true;
                  ;;
                *)
                  echo "Usage: $(basename $0) -b <Name of Bucket containing ETCD initial-cluster file>"
                  exit 0
                  ;;
            esac
        done

        if ! $bOptionFlag
        then
          echo "Usage: $(basename $0) -b <Name of Bucket containing ETCD initial-cluster file>"
          exit 0;
        fi

        # Download initial cluster file from S3 bucket
        docker run -d --name aws-cli -v $(pwd)/aws-cli:/aws stakater/aws-cli aws s3 cp s3://$BUCKET_NAME/etcd/initial-cluster .

        # Wait for file to download
        sleep 5;

        if [ ! -f $(pwd)/aws-cli/initial-cluster ];
        then
          echo "Initial Cluster file not found in $(pwd)/aws-cli/"
          exit 1;
        fi

        # Copy it to specified locations
        sudo cp $(pwd)/aws-cli/initial-cluster /etc/sysconfig/
        sudo cp $(pwd)/aws-cli/initial-cluster /root/cloudinit

        # Replace the new ip in the etcd cluster file
        newip=$(cat $(pwd)/aws-cli/initial-cluster | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}');
        if [ "$newip" != "" ];
        then
          sudo sed -i -r 's/(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'/$newip/ /var/lib/etcd2/proxy/cluster
        fi

        # Restart etcd and fleet
        sudo systemctl restart etcd2
        sudo systemctl restart fleet

        # Cleanup
        docker rm -vf aws-cli
        sudo rm -rf $(pwd)/aws-cli
        echo "Etcd initial cluster updated"